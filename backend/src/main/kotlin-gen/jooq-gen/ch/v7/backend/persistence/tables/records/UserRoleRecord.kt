/*
 * This file is generated by jOOQ.
 */
package ch.v7.backend.persistence.tables.records


import ch.v7.backend.persistence.tables.UserRoleTable
import ch.v7.backend.persistence.tables.pojos.UserRole

import java.util.UUID

import org.jetbrains.annotations.NotNull
import org.jooq.Field
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserRoleRecord private constructor() : UpdatableRecordImpl<UserRoleRecord>(UserRoleTable.USER_ROLE), Record2<UUID?, UUID?> {

    open var userId: UUID
        set(value): Unit = set(0, value)
    @NotNull
        get(): UUID = get(0) as UUID

    open var roleId: UUID
        set(value): Unit = set(1, value)
    @NotNull
        get(): UUID = get(1) as UUID

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<UUID?, UUID?> = super.key() as Record2<UUID?, UUID?>

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<UUID?, UUID?> = super.fieldsRow() as Row2<UUID?, UUID?>
    override fun valuesRow(): Row2<UUID?, UUID?> = super.valuesRow() as Row2<UUID?, UUID?>
    override fun field1(): Field<UUID?> = UserRoleTable.USER_ROLE.USER_ID
    override fun field2(): Field<UUID?> = UserRoleTable.USER_ROLE.ROLE_ID
    override fun component1(): UUID = userId
    override fun component2(): UUID = roleId
    override fun value1(): UUID = userId
    override fun value2(): UUID = roleId

    override fun value1(value: UUID?): UserRoleRecord {
        set(0, value)
        return this
    }

    override fun value2(value: UUID?): UserRoleRecord {
        set(1, value)
        return this
    }

    override fun values(value1: UUID?, value2: UUID?): UserRoleRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised UserRoleRecord
     */
    constructor(userId: UUID, roleId: UUID): this() {
        this.userId = userId
        this.roleId = roleId
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised UserRoleRecord
     */
    constructor(value: UserRole?): this() {
        if (value != null) {
            this.userId = value.userId
            this.roleId = value.roleId
            resetChangedOnNotNull()
        }
    }
}
