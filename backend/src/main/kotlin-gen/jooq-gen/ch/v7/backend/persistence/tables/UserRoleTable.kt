/*
 * This file is generated by jOOQ.
 */
package ch.v7.backend.persistence.tables


import ch.v7.backend.persistence.Backend
import ch.v7.backend.persistence.keys.FK_USER_ROLE_ROLE
import ch.v7.backend.persistence.keys.FK_USER_ROLE_USER
import ch.v7.backend.persistence.keys.KEY_T_USER_ROLE_PRIMARY
import ch.v7.backend.persistence.tables.records.UserRoleRecord

import java.util.UUID
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row2
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.AutoConverter
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserRoleTable(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, UserRoleRecord>?,
    aliased: Table<UserRoleRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<UserRoleRecord>(
    alias,
    Backend.BACKEND,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>backend.t_user_role</code>
         */
        val USER_ROLE: UserRoleTable = UserRoleTable()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UserRoleRecord> = UserRoleRecord::class.java

    /**
     * The column <code>backend.t_user_role.user_id</code>.
     */
    val USER_ID: TableField<UserRoleRecord, UUID?> = createField(DSL.name("user_id"), SQLDataType.CHAR(36).nullable(false), this, "", AutoConverter<String, UUID>(String::class.java, UUID::class.java))

    /**
     * The column <code>backend.t_user_role.role_id</code>.
     */
    val ROLE_ID: TableField<UserRoleRecord, UUID?> = createField(DSL.name("role_id"), SQLDataType.CHAR(36).nullable(false), this, "", AutoConverter<String, UUID>(String::class.java, UUID::class.java))

    private constructor(alias: Name, aliased: Table<UserRoleRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<UserRoleRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>backend.t_user_role</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>backend.t_user_role</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>backend.t_user_role</code> table reference
     */
    constructor(): this(DSL.name("t_user_role"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, UserRoleRecord>): this(Internal.createPathAlias(child, key), child, key, USER_ROLE, null)
    override fun getSchema(): Schema? = if (aliased()) null else Backend.BACKEND
    override fun getPrimaryKey(): UniqueKey<UserRoleRecord> = KEY_T_USER_ROLE_PRIMARY
    override fun getReferences(): List<ForeignKey<UserRoleRecord, *>> = listOf(FK_USER_ROLE_USER, FK_USER_ROLE_ROLE)

    private lateinit var _tUser: UserTable
    private lateinit var _tRole: RoleTable

    /**
     * Get the implicit join path to the <code>backend.t_user</code> table.
     */
    fun tUser(): UserTable {
        if (!this::_tUser.isInitialized)
            _tUser = UserTable(this, FK_USER_ROLE_USER)

        return _tUser;
    }

    val tUser: UserTable
        get(): UserTable = tUser()

    /**
     * Get the implicit join path to the <code>backend.t_role</code> table.
     */
    fun tRole(): RoleTable {
        if (!this::_tRole.isInitialized)
            _tRole = RoleTable(this, FK_USER_ROLE_ROLE)

        return _tRole;
    }

    val tRole: RoleTable
        get(): RoleTable = tRole()
    override fun `as`(alias: String): UserRoleTable = UserRoleTable(DSL.name(alias), this)
    override fun `as`(alias: Name): UserRoleTable = UserRoleTable(alias, this)
    override fun `as`(alias: Table<*>): UserRoleTable = UserRoleTable(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): UserRoleTable = UserRoleTable(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): UserRoleTable = UserRoleTable(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): UserRoleTable = UserRoleTable(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row2<UUID?, UUID?> = super.fieldsRow() as Row2<UUID?, UUID?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (UUID?, UUID?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (UUID?, UUID?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
