/*
 * This file is generated by jOOQ.
 */
package ch.v7.backend.persistence.tables


import ch.v7.backend.persistence.V7Backend
import ch.v7.backend.persistence.keys.FK_USER_ROLE_ROLE
import ch.v7.backend.persistence.keys.FK_USER_ROLE_USER
import ch.v7.backend.persistence.keys.KEY_T_USER_ROLE_PRIMARY
import ch.v7.backend.persistence.tables.RoleTable.TRolePath
import ch.v7.backend.persistence.tables.UserTable.TUserPath
import ch.v7.backend.persistence.tables.records.UserRoleRecord

import java.util.UUID

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.AutoConverter
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserRoleTable(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, UserRoleRecord>?,
    parentPath: InverseForeignKey<out Record, UserRoleRecord>?,
    aliased: Table<UserRoleRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<UserRoleRecord>(
    alias,
    V7Backend.V7_BACKEND,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>v7_backend.t_user_role</code>
         */
        val USER_ROLE: UserRoleTable = UserRoleTable()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<UserRoleRecord> = UserRoleRecord::class.java

    /**
     * The column <code>v7_backend.t_user_role.user_id</code>.
     */
    val USER_ID: TableField<UserRoleRecord, UUID?> = createField(DSL.name("user_id"), SQLDataType.CHAR(36).nullable(false), this, "", AutoConverter<String, UUID>(String::class.java, UUID::class.java))

    /**
     * The column <code>v7_backend.t_user_role.role_id</code>.
     */
    val ROLE_ID: TableField<UserRoleRecord, UUID?> = createField(DSL.name("role_id"), SQLDataType.CHAR(36).nullable(false), this, "", AutoConverter<String, UUID>(String::class.java, UUID::class.java))

    private constructor(alias: Name, aliased: Table<UserRoleRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<UserRoleRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<UserRoleRecord>?, where: Condition): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>v7_backend.t_user_role</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>v7_backend.t_user_role</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>v7_backend.t_user_role</code> table reference
     */
    constructor(): this(DSL.name("t_user_role"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, UserRoleRecord>?, parentPath: InverseForeignKey<out Record, UserRoleRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, USER_ROLE, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class TUserRolePath : UserRoleTable, Path<UserRoleRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, UserRoleRecord>?, parentPath: InverseForeignKey<out Record, UserRoleRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<UserRoleRecord>): super(alias, aliased)
        override fun `as`(alias: String): TUserRolePath = TUserRolePath(DSL.name(alias), this)
        override fun `as`(alias: Name): TUserRolePath = TUserRolePath(alias, this)
        override fun `as`(alias: Table<*>): TUserRolePath = TUserRolePath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else V7Backend.V7_BACKEND
    override fun getPrimaryKey(): UniqueKey<UserRoleRecord> = KEY_T_USER_ROLE_PRIMARY
    override fun getReferences(): List<ForeignKey<UserRoleRecord, *>> = listOf(FK_USER_ROLE_USER, FK_USER_ROLE_ROLE)

    private lateinit var _tUser: TUserPath

    /**
     * Get the implicit join path to the <code>v7_backend.t_user</code> table.
     */
    fun tUser(): TUserPath {
        if (!this::_tUser.isInitialized)
            _tUser = TUserPath(this, FK_USER_ROLE_USER, null)

        return _tUser;
    }

    val tUser: TUserPath
        get(): TUserPath = tUser()

    private lateinit var _tRole: TRolePath

    /**
     * Get the implicit join path to the <code>v7_backend.t_role</code> table.
     */
    fun tRole(): TRolePath {
        if (!this::_tRole.isInitialized)
            _tRole = TRolePath(this, FK_USER_ROLE_ROLE, null)

        return _tRole;
    }

    val tRole: TRolePath
        get(): TRolePath = tRole()
    override fun `as`(alias: String): UserRoleTable = UserRoleTable(DSL.name(alias), this)
    override fun `as`(alias: Name): UserRoleTable = UserRoleTable(alias, this)
    override fun `as`(alias: Table<*>): UserRoleTable = UserRoleTable(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): UserRoleTable = UserRoleTable(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): UserRoleTable = UserRoleTable(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): UserRoleTable = UserRoleTable(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition): UserRoleTable = UserRoleTable(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): UserRoleTable = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition): UserRoleTable = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>): UserRoleTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): UserRoleTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): UserRoleTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): UserRoleTable = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): UserRoleTable = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): UserRoleTable = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): UserRoleTable = where(DSL.notExists(select))
}
