/*
 * This file is generated by jOOQ.
 */
package ch.v7.backend.persistence.tables.records


import ch.v7.backend.persistence.tables.UserRessortTable
import ch.v7.backend.persistence.tables.pojos.UserRessort

import java.util.UUID

import org.jetbrains.annotations.NotNull
import org.jooq.Record2
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserRessortRecord private constructor() : UpdatableRecordImpl<UserRessortRecord>(UserRessortTable.USER_RESSORT) {

    open var userId: UUID
        set(value): Unit = set(0, value)
    @NotNull
        get(): UUID = get(0) as UUID

    open var ressortId: UUID
        set(value): Unit = set(1, value)
    @NotNull
        get(): UUID = get(1) as UUID

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<UUID?, UUID?> = super.key() as Record2<UUID?, UUID?>

    /**
     * Create a detached, initialised UserRessortRecord
     */
    constructor(userId: UUID, ressortId: UUID): this() {
        this.userId = userId
        this.ressortId = ressortId
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised UserRessortRecord
     */
    constructor(value: UserRessort?): this() {
        if (value != null) {
            this.userId = value.userId
            this.ressortId = value.ressortId
            resetChangedOnNotNull()
        }
    }
}
