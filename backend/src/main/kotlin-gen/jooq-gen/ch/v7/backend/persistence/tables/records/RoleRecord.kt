/*
 * This file is generated by jOOQ.
 */
package ch.v7.backend.persistence.tables.records


import ch.v7.backend.persistence.tables.RoleTable
import ch.v7.backend.persistence.tables.pojos.Role

import java.util.UUID

import org.jetbrains.annotations.NotNull
import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RoleRecord private constructor() : UpdatableRecordImpl<RoleRecord>(RoleTable.ROLE), Record2<UUID?, String?> {

    open var id: UUID
        set(value): Unit = set(0, value)
    @NotNull
        get(): UUID = get(0) as UUID

    open var name: String
        set(value): Unit = set(1, value)
    @NotNull
        get(): String = get(1) as String

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row2<UUID?, String?> = super.fieldsRow() as Row2<UUID?, String?>
    override fun valuesRow(): Row2<UUID?, String?> = super.valuesRow() as Row2<UUID?, String?>
    override fun field1(): Field<UUID?> = RoleTable.ROLE.ID
    override fun field2(): Field<String?> = RoleTable.ROLE.NAME
    override fun component1(): UUID = id
    override fun component2(): String = name
    override fun value1(): UUID = id
    override fun value2(): String = name

    override fun value1(value: UUID?): RoleRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): RoleRecord {
        set(1, value)
        return this
    }

    override fun values(value1: UUID?, value2: String?): RoleRecord {
        this.value1(value1)
        this.value2(value2)
        return this
    }

    /**
     * Create a detached, initialised RoleRecord
     */
    constructor(id: UUID, name: String): this() {
        this.id = id
        this.name = name
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised RoleRecord
     */
    constructor(value: Role?): this() {
        if (value != null) {
            this.id = value.id
            this.name = value.name
            resetChangedOnNotNull()
        }
    }
}
