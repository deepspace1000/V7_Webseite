/*
 * This file is generated by jOOQ.
 */
package ch.v7.backend.persistence.tables.daos


import ch.v7.backend.persistence.tables.RoleTable
import ch.v7.backend.persistence.tables.pojos.Role
import ch.v7.backend.persistence.tables.records.RoleRecord
import ch.v7.backend.role.Roles

import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.AutoConverter
import org.jooq.impl.DAOImpl
import org.jooq.impl.EnumConverter


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RoleDao(configuration: Configuration?) : DAOImpl<RoleRecord, Role, UUID>(RoleTable.ROLE, Role::class.java, configuration) {

    /**
     * Create a new RoleDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: Role): UUID = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: UUID, upperInclusive: UUID): List<Role> = fetchRange(RoleTable.ROLE.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: UUID): List<Role> = fetch(RoleTable.ROLE.ID, *values)

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: UUID): Role? = fetchOne(RoleTable.ROLE.ID, value)

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfName(lowerInclusive: Roles, upperInclusive: Roles): List<Role> = fetchRange(RoleTable.ROLE.NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    fun fetchByName(vararg values: Roles): List<Role> = fetch(RoleTable.ROLE.NAME, *values)
}
