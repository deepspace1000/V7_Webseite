/*
 * This file is generated by jOOQ.
 */
package ch.v7.backend.persistence.tables.records


import ch.v7.backend.persistence.tables.RessortTable
import ch.v7.backend.persistence.tables.pojos.Ressort

import java.util.UUID

import org.jetbrains.annotations.NotNull
import org.jetbrains.annotations.Nullable
import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RessortRecord private constructor() : UpdatableRecordImpl<RessortRecord>(RessortTable.RESSORT) {

    open var id: UUID
        set(value): Unit = set(0, value)
    @NotNull
        get(): UUID = get(0) as UUID

    open var name: String
        set(value): Unit = set(1, value)
    @NotNull
        get(): String = get(1) as String

    open var description: String?
        set(value): Unit = set(2, value)
    @Nullable
        get(): String? = get(2) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    /**
     * Create a detached, initialised RessortRecord
     */
    constructor(id: UUID, name: String, description: String? = null): this() {
        this.id = id
        this.name = name
        this.description = description
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised RessortRecord
     */
    constructor(value: Ressort?): this() {
        if (value != null) {
            this.id = value.id
            this.name = value.name
            this.description = value.description
            resetChangedOnNotNull()
        }
    }
}
