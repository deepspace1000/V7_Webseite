/*
 * This file is generated by jOOQ.
 */
package ch.v7.backend.persistence.tables.records


import ch.v7.backend.persistence.tables.RessortTable
import ch.v7.backend.persistence.tables.pojos.Ressort

import java.util.UUID

import org.jetbrains.annotations.NotNull
import org.jetbrains.annotations.Nullable
import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RessortRecord private constructor() : UpdatableRecordImpl<RessortRecord>(RessortTable.RESSORT), Record3<UUID?, String?, String?> {

    open var id: UUID
        set(value): Unit = set(0, value)
    @NotNull
        get(): UUID = get(0) as UUID

    open var name: String
        set(value): Unit = set(1, value)
    @NotNull
        get(): String = get(1) as String

    open var description: String?
        set(value): Unit = set(2, value)
    @Nullable
        get(): String? = get(2) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<UUID?, String?, String?> = super.fieldsRow() as Row3<UUID?, String?, String?>
    override fun valuesRow(): Row3<UUID?, String?, String?> = super.valuesRow() as Row3<UUID?, String?, String?>
    override fun field1(): Field<UUID?> = RessortTable.RESSORT.ID
    override fun field2(): Field<String?> = RessortTable.RESSORT.NAME
    override fun field3(): Field<String?> = RessortTable.RESSORT.DESCRIPTION
    override fun component1(): UUID = id
    override fun component2(): String = name
    override fun component3(): String? = description
    override fun value1(): UUID = id
    override fun value2(): String = name
    override fun value3(): String? = description

    override fun value1(value: UUID?): RessortRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): RessortRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): RessortRecord {
        set(2, value)
        return this
    }

    override fun values(value1: UUID?, value2: String?, value3: String?): RessortRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised RessortRecord
     */
    constructor(id: UUID, name: String, description: String? = null): this() {
        this.id = id
        this.name = name
        this.description = description
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised RessortRecord
     */
    constructor(value: Ressort?): this() {
        if (value != null) {
            this.id = value.id
            this.name = value.name
            this.description = value.description
            resetChangedOnNotNull()
        }
    }
}
