/*
 * This file is generated by jOOQ.
 */
package ch.v7.backend.persistence.tables.daos


import ch.v7.backend.persistence.tables.UserTable
import ch.v7.backend.persistence.tables.pojos.User
import ch.v7.backend.persistence.tables.records.UserRecord

import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class UserDao(configuration: Configuration?) : DAOImpl<UserRecord, User, UUID>(UserTable.USER, User::class.java, configuration) {

    /**
     * Create a new UserDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: User): UUID = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: UUID, upperInclusive: UUID): List<User> = fetchRange(UserTable.USER.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: UUID): List<User> = fetch(UserTable.USER.ID, *values)

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: UUID): User? = fetchOne(UserTable.USER.ID, value)

    /**
     * Fetch records that have <code>first_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfFirstName(lowerInclusive: String, upperInclusive: String): List<User> = fetchRange(UserTable.USER.FIRST_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>first_name IN (values)</code>
     */
    fun fetchByFirstName(vararg values: String): List<User> = fetch(UserTable.USER.FIRST_NAME, *values)

    /**
     * Fetch records that have <code>last_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfLastName(lowerInclusive: String, upperInclusive: String): List<User> = fetchRange(UserTable.USER.LAST_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>last_name IN (values)</code>
     */
    fun fetchByLastName(vararg values: String): List<User> = fetch(UserTable.USER.LAST_NAME, *values)

    /**
     * Fetch records that have <code>phone BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfPhone(lowerInclusive: String?, upperInclusive: String?): List<User> = fetchRange(UserTable.USER.PHONE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>phone IN (values)</code>
     */
    fun fetchByPhone(vararg values: String): List<User> = fetch(UserTable.USER.PHONE, *values)

    /**
     * Fetch records that have <code>e_mail BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfEMail(lowerInclusive: String, upperInclusive: String): List<User> = fetchRange(UserTable.USER.E_MAIL, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>e_mail IN (values)</code>
     */
    fun fetchByEMail(vararg values: String): List<User> = fetch(UserTable.USER.E_MAIL, *values)

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfPassword(lowerInclusive: String, upperInclusive: String): List<User> = fetchRange(UserTable.USER.PASSWORD, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    fun fetchByPassword(vararg values: String): List<User> = fetch(UserTable.USER.PASSWORD, *values)
}
