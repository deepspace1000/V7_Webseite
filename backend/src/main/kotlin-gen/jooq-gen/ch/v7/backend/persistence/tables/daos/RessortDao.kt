/*
 * This file is generated by jOOQ.
 */
package ch.v7.backend.persistence.tables.daos


import ch.v7.backend.persistence.tables.RessortTable
import ch.v7.backend.persistence.tables.pojos.Ressort
import ch.v7.backend.persistence.tables.records.RessortRecord

import java.util.UUID

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RessortDao(configuration: Configuration?) : DAOImpl<RessortRecord, Ressort, UUID>(RessortTable.RESSORT, Ressort::class.java, configuration) {

    /**
     * Create a new RessortDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: Ressort): UUID = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: UUID, upperInclusive: UUID): List<Ressort> = fetchRange(RessortTable.RESSORT.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: UUID): List<Ressort> = fetch(RessortTable.RESSORT.ID, *values)

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: UUID): Ressort? = fetchOne(RessortTable.RESSORT.ID, value)

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfName(lowerInclusive: String, upperInclusive: String): List<Ressort> = fetchRange(RessortTable.RESSORT.NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    fun fetchByName(vararg values: String): List<Ressort> = fetch(RessortTable.RESSORT.NAME, *values)

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfDescription(lowerInclusive: String?, upperInclusive: String?): List<Ressort> = fetchRange(RessortTable.RESSORT.DESCRIPTION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    fun fetchByDescription(vararg values: String): List<Ressort> = fetch(RessortTable.RESSORT.DESCRIPTION, *values)
}
