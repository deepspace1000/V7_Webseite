/*
 * This file is generated by jOOQ.
 */
package ch.v7.backend.persistence.tables


import ch.v7.backend.persistence.V7Backend
import ch.v7.backend.persistence.keys.FK_USER_RESSORT_RESSORT
import ch.v7.backend.persistence.keys.KEY_T_RESSORT_PRIMARY
import ch.v7.backend.persistence.tables.UserRessortTable.TUserRessortPath
import ch.v7.backend.persistence.tables.UserTable.TUserPath
import ch.v7.backend.persistence.tables.records.RessortRecord

import java.util.UUID

import kotlin.collections.Collection

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.AutoConverter
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RessortTable(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, RessortRecord>?,
    parentPath: InverseForeignKey<out Record, RessortRecord>?,
    aliased: Table<RessortRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<RessortRecord>(
    alias,
    V7Backend.V7_BACKEND,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>v7_backend.t_ressort</code>
         */
        val RESSORT: RessortTable = RessortTable()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<RessortRecord> = RessortRecord::class.java

    /**
     * The column <code>v7_backend.t_ressort.id</code>.
     */
    val ID: TableField<RessortRecord, UUID?> = createField(DSL.name("id"), SQLDataType.CHAR(36).nullable(false), this, "", AutoConverter<String, UUID>(String::class.java, UUID::class.java))

    /**
     * The column <code>v7_backend.t_ressort.name</code>.
     */
    val NAME: TableField<RessortRecord, String?> = createField(DSL.name("name"), SQLDataType.VARCHAR(255).nullable(false), this, "")

    /**
     * The column <code>v7_backend.t_ressort.description</code>.
     */
    val DESCRIPTION: TableField<RessortRecord, String?> = createField(DSL.name("description"), SQLDataType.VARCHAR(255).defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.VARCHAR)), this, "")

    private constructor(alias: Name, aliased: Table<RessortRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<RessortRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<RessortRecord>?, where: Condition): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>v7_backend.t_ressort</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>v7_backend.t_ressort</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>v7_backend.t_ressort</code> table reference
     */
    constructor(): this(DSL.name("t_ressort"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, RessortRecord>?, parentPath: InverseForeignKey<out Record, RessortRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, RESSORT, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class TRessortPath : RessortTable, Path<RessortRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, RessortRecord>?, parentPath: InverseForeignKey<out Record, RessortRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<RessortRecord>): super(alias, aliased)
        override fun `as`(alias: String): TRessortPath = TRessortPath(DSL.name(alias), this)
        override fun `as`(alias: Name): TRessortPath = TRessortPath(alias, this)
        override fun `as`(alias: Table<*>): TRessortPath = TRessortPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else V7Backend.V7_BACKEND
    override fun getPrimaryKey(): UniqueKey<RessortRecord> = KEY_T_RESSORT_PRIMARY

    private lateinit var _tUserRessort: TUserRessortPath

    /**
     * Get the implicit to-many join path to the
     * <code>v7_backend.t_user_ressort</code> table
     */
    fun tUserRessort(): TUserRessortPath {
        if (!this::_tUserRessort.isInitialized)
            _tUserRessort = TUserRessortPath(this, null, FK_USER_RESSORT_RESSORT.inverseKey)

        return _tUserRessort;
    }

    val tUserRessort: TUserRessortPath
        get(): TUserRessortPath = tUserRessort()

    /**
     * Get the implicit many-to-many join path to the
     * <code>v7_backend.t_user</code> table
     */
    val tUser: TUserPath
        get(): TUserPath = tUserRessort().tUser()
    override fun `as`(alias: String): RessortTable = RessortTable(DSL.name(alias), this)
    override fun `as`(alias: Name): RessortTable = RessortTable(alias, this)
    override fun `as`(alias: Table<*>): RessortTable = RessortTable(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): RessortTable = RessortTable(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): RessortTable = RessortTable(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): RessortTable = RessortTable(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition): RessortTable = RessortTable(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): RessortTable = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition): RessortTable = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>): RessortTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): RessortTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): RessortTable = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): RessortTable = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): RessortTable = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): RessortTable = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): RessortTable = where(DSL.notExists(select))
}
